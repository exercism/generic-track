#!/usr/bin/env ruby

begin
require 'octokit'
rescue LoadError => e
  puts e
  exit
end
require 'date'
require 'fileutils'
require 'securerandom'

slug = ENV['SLUG']
language = ENV['LANGUAGE']

if !(slug && language)
  STDERR.puts "\nUsage: LANGUAGE=<language> SLUG=<slug> USERNAMES=<comma,separated,list> bin/bootstrap"
  exit 1
end

unless system("gh --version")
  STDERR.puts "\nYou need to install gh. See https://cli.github.com/."
  exit 1
end
unless system("gh auth status")
  # Not tested. I'm just assuming it will return non-zero status if not logged in.
  STDERR.puts("\nYou need to authenticate. Run 'gh auth login'.")
  exit 1
end

# Ensure tokens are still active.
tracks_dir = File.expand_path("../../../tracks", __FILE__)
FileUtils.mkdir_p(tracks_dir)

dir = File.join(tracks_dir, slug)

if File.exist?(dir)
  STDERR.puts("FATAL: %s already exists" % slug)
end

template = File.expand_path("../../../generic-track", __FILE__)

system("cp -r %s %s" % [template, dir])
system("rm -rf %s" % File.join(dir, ".git"))
system("rm -rf %s" % File.join(dir, "Gemfile"))
system("rm -rf %s" % File.join(dir, "Gemfile.lock"))
system("rm -rf %s" % File.join(dir, ".ruby-version"))
system("rm -rf %s" % File.join(dir, "bin/bootstrap"))
system("rm -rf %s" % File.join(dir, ".github/ISSUE_TEMPLATE.md"))
system("rm -rf %s" % File.join(dir, ".github/workflows/pause-community-contributions.yml"))
system("mv %s/TRACK_README.md %s/README.md" % [dir, dir])

f = File.join(dir, 'LICENSE')
contents = File.read(f)
File.open(f, "w") do |f|
  f.write contents.gsub(/\d{4}/, Date.today.year.to_s)
end

f = File.join(dir, 'docs', 'config.json')
contents = File.read(f)
File.open(f, "w") do |f|
  f.write contents.gsub('{{UUID}}') {|m| SecureRandom.uuid }
end

[
  "config.json",
  "README.md",
  "CHECKLIST.md",
  File.join("docs", "config.json")
].each do |name|
  f = File.join(dir, name)
  contents = File.read(f)
  File.open(f, "w") do |f|
    f.write contents.gsub("{{SLUG}}", slug).gsub("{{LANGUAGE}}", language)
  end
end

Dir.chdir dir

system("git init")

gitinfo = File.join(dir, ".git", "info")
FileUtils.mkdir_p(gitinfo)
system("echo %s >> %s" % ["CHECKLIST.md", File.join(gitinfo, "exclude")])

system("git add .")
system("git commit -m 'Bootstrap %s track'" % language)
if system("git branch | grep master")
  system("git branch -m master main")
end
puts
puts
if !system("gh repo create --public --source=. --remote=origin --push exercism/#{slug}")
  STDERR.puts "Failed to create the repo. Will need to debug."
  exit 1
end

if !system("git push origin main")
  exit 1
end

if !system("gh issue create --title=\"Launch tracking\" --body-file CHECKLIST.md")
  exit 1
end

access_token = `gh auth token`
client = Octokit::Client.new(access_token:)

repo_options = {
  :name => slug,
  :description => "Exercism exercises in %s." % language,
  :homepage => "https://exercism.org/tracks/%s" % slug,
  :has_projects => false,
  :has_wiki => false,
}
repo = client.edit_repository("exercism/%s" % slug, repo_options)

client.put('/repos/exercism/%s/topics' % slug, {names: ["exercism-track"], accept: 'application/vnd.github.mercy-preview+json'})

team_options = {
  :name => slug,
  :description => "Maintainers of the Exercism %s track" % language,
  :privacy => 'closed',
  :parent_team_id => 1399433,
}
team = client.create_team('exercism', team_options.merge(accept: 'application/vnd.github.hellcat-preview+json'))
user = client.get("/user")
client.delete("/orgs/exercism/teams/#{slug}/memberships/#{user.login}")
client.add_team_repository(team.id, 'exercism/%s' % slug, permission: 'push')

maintainers_admin_team = client.get('/orgs/exercism/teams/maintainers-admin')
client.add_team_repository(maintainers_admin_team.id, 'exercism/%s' % slug, permission: 'maintain')

ENV['USERNAMES'].to_s.split(",").each do |username|
  begin
    client.put("/orgs/exercism/teams/#{slug}/memberships/#{username}", { role: "member" })
  rescue
    # if a user can't be added, just keep going
  end
end
