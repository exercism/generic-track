Implement continuous integration

Implement the "track test suite".  This suite should:

- for each exercise in the track,
  - run that exercise's test suite (aka the "exercise test suite");
  - use the exercise's solution as the code under test.
- ensure all test cases are enabled;
- be executed on Travis CI;
- be easy to run on a contributor/maintainer's local machine (i.e. a build script with any needed instructions).

**Definition of terms**

- **exercise test suite**: the test suite that is delivered to Exercism users as part of an Exercism exercise
- **track test suite**: the test suite that helps ensure that all of the exercise test suites in a language track are solvable

**Background**

The goal of the "track test suite" is to ensure that the "exercise test suite"s delivered to Exercism users will work properly.  The best way to do this is to execute the exercise test suite against a known good solution â€” the example solution in the exercise.

_Enabling all test cases_

As described in [Contributing to Exercism: Writing exercise test suites](writing_tests.md), exercise test suites are written such that all but the first test case are skipped/pending/ignored.  For the purpose of the track test suite, all test cases should be enabled (simulating an Exercism user having completed the exercise).

Additionally, in some programming languages, the name of the file containing the solution is hard-coded in the test suite, and the example solution is not named in the way that we expect people to name their files.

We will need to temporarily (and programmatically) edit the exercise test suites to ensure that all of their tests are active. We may also need to rename the example solution file(s) in order for the exercise test suite to run against it.

It's important that if we rewrite files in any way during a test run, that these changes do not accidentally get checked in to the git repository.

Therefore, many language tracks write the track test suite in such a way that it _copies_ the exercise to a temporary location outside of the git repository before editing or rewriting the exercise files during a test run.

_Configuring Travis CI_

A contributor may forget to run the track test suite before submitting a PR.  Also, sometimes a test suite will succeed even when something is wrong with the test suite on a contributor's local machine because of some artifact of their local configuration.  Running the suite on a continuous integration server (here, Travis CI) ensures the track test suite is run from scratch.

In order to successfully run the track test suite, Travis may need to be configured to provide a development environment for this track's language -or- a setup script needs to be provided to perform the setup.  [Travis Docs](https://docs.travis-ci.com) enumerate the supported languages and instructions for how to customize the build.

_Running locally_

Having to commit and push changes to GitHub (in order to trigger the CI build) and waiting for the results can be unnecessarily laborious for someone contributing to the track.  The same build process that runs on Travis CI should be executable locally.

This is usually done by capturing whatever steps are required to run the track test suite in a single script or makefile.

Usually as people are developing the track, they're focused on a single exercise. If running the entire track test suite against all of the exercises takes a long time, it is often worth making it possible to verify just one exercise at a time.

**Example build file**

The PHP track has created a [Makefile][make]. The Ruby track uses Rake, which is a tool written in Ruby, allowing the track maintainers to write custom code in the language of the track to customize the build with a [Rakefile][rake].

[make]: https://github.com/exercism/xphp/blob/master/Makefile
[rake]: https://github.com/exercism/xruby/blob/master/Rakefile
